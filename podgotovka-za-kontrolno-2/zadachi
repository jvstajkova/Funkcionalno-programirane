{- 
data Bt=Empty| Node Int Bt Bt
bt::Bt
bt=Node 1(Node 2 (Node 3 (Node 5 Empty Empty) Empty) (Node 4 Empty Empty) )
                 (Node 5 Empty (Node 2 (Node 7 Empty Empty) Empty))
g1::Bt->[Int]
g1 Empty=[]
g1 (Node x Empty Empty)=[x]
g1 (Node x lt rt)=(g1 lt)++(g1 rt)

main=do
  print (g1 bt)
  print (g2 bt (+))
  print (g3 bt)
  print (g4 bt)
  print (g5 bt 2)
  
g2::Bt->((Int->Int->Int)->Int)

g2 bt f=foldl f 0 (g1 bt)

g3::Bt->[(Int,Int)]

g3 bt=g3H bt 0
g3H Empty _=[]
g3H (Node x lt rt) lev =[(x,lev)]++(g3H lt (lev+1))++(g3H rt (lev+1))

g4::Bt->[(Int,Int)]
g4 Empty=[]
g4 (Node x lt rt) =[(x,length(left++right))]++left++right
   where left=g4 lt
         right=g4 rt
g5::Bt->Int->[[Int]]
g5 Empty _ =[[]]
g5 (Node x Empty Empty) _=[[]]
g5 (Node x (Node y lt rt) Empty) s=(if (s==x )then[[x,y]] else [])++(g5 (Node y lt rt) s)
 -}
 -- bt::(BTree Int)
 --bt=(Node 5 (..............))
 
 
 --zadacha1
data Bt= Em|Nd Int Bt Bt
data BTree a = Empty|Node a (BTree a) (BTree a)

findSue::(Eq a) => (BTree a)->a->[a] --tursi put, ako nqma sledvasht element vrushta prazen spisuk
findSue Empty _ =[]
findSue (Node v lt rt) x =
   if (x==v) then (getV lt) ++ (getV rt)
   else (findSue lt x)++(findSue rt x)
where getV Empty = []
    getV(Node v lt rt) = [v]
    
 --zadacha2   
expand :: (Eq a)=>(BTree a)->[a]->[[a]]
expand bt path = map (\v->path++[v]) (findSue bt(last path))
expandAll :: (Eq a)=>(BTree a)->[[a]]->[[a]]
--primer [[1], [2]] -> [[[1,2,4]],[[1,2]],[[2,4]],[[2,6]]] -> s dvoini skobi, zashtoto e spisuk ot spisuci
expandAll bt ps=  concatMap(\path->expand bt path) ps --dali shte pishe ps ili ne e vse taq, a concatMap maha dvoinite skobi 
--demek [[1], [1,3,5]] ->prilagame map->[[[1,2]], []]->prilagame concat->[[1,2]]
allPaths::(Eq a)=>(Btree a) ->[[a]] --vrushta vsichki putishta
allPaths Empty = []
allPaths bt@(Node v ....) = helper bt [[v]] [] 
where helper [] paths  = nub paths --nub maha povtoreniq v daden spisuk
   helper bt curPaths paths = helper bt (expanded++(map tail expand bt)) (paths ++ expanded)
   where expanded = expandAll bt curPaths
   
--zadacha 3 
findP::(Eq a)=> (BTree)->a->a->[[a]]
findP bt start end = filter (\path->((head path) == start) && ((last path) == end)) (allPaths bt)

--zadacha4
--namira min put, t.e. putqt, koito ima minimalna cena 
data Btp a= Empty | Node a Int (Btp a) (Btp a)
minP::Btp(Int) ->[Int]
bt ::(Btp Int)
bt=Node 1 0 (Node 2 10(Node 4 1 Empty Empty)(Node 5 2 Empty Empty))
            (Node 3 11 (Node 6 3 Empty Empty))
findSue ::(Btp Int)->[(Int, Int)]
expand::(Btp Int)->[[(Int, Int)]]->[[(Int, Int)]]
allPaths:: (Btp Int )->[[(Int, Int)]]
minP bt = snd minimum (map (\path ->(sum (map snd path)), (map fst path)) (allPaths bt))

zadacha, koqto vrushta funkciq, 
zadacha, koqto ...
--Ord a  == < > <=   >=
--Eq a ==
