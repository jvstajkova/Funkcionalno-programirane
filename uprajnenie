main = do
  -- print(f1 "niz" 5 " !!")
   
   
--zadacha1
{-f1::String->Int->String->String
f1 str1 count str2 = str1 ++ concat (replicate (count-1) (str2++str1))
-}

--zadacha2
{-f2::Int->String->(String->String)
f2 count str2 = (\str1 ->f1 str1 count str2) 
--f2 count str2 str1 = f1 str1 count str2    
-}

--zadacha3
{-f3::Int->Int->Int
f3 a b = a*(b+2)
f3 1 2 -> 3
-}
--zadacha4
{- a) da se napishe funkciq, koqto namira imeto na produkta, 
chiqto cena e nai-blizka do srednata
cena za vsichki produkti. Ako ima poveche 
ot edin takuv produkt, funkciqta da vrushta 
imeto na koi da e ot namerenite
-}
type Product = (String, Double)
type StoreAvailability = [Product]
closestToAverage :: StoreAvailability->String
closeToAverage ps = snd ((minimum [(abs (price-average)), name) | (name, price) <-ps]) 
   where avg = (sum (map snd ps)) / (fromIntegral (length ps)) -- average
{- b) da se napishe funkciq cheaperAlternative::StoreAvailability->Int,
koqto namira broq na produktite, za koito ima produkt sus sushtoto ime,
no strogo po-niska cena
primeri : 
store1=[("bread", 1), ("milk", 2.5), ("lamb", 10), ("cheese", 5), ("butter", 2.3)] ->closestToAverage store1 -> "cheese"
store2=[("bread", 1), ("cheese", 2.5), ("bread", 1), ("cheese", 5), ("butter", 2.3)] -> cheaperAlternative store2 -> 1
-}
--nub ["a", "b", "b"]->["a", "b"] --maha povtoreniqta
--nub [(1, 2), (1, 2), (1, 3)] -> [(1, 2), (1, 3)]
cheaperAlternative::StoreAvailability->Int
--[(a, 1.5), (a, 1), (a, 1.2), (b, 1)] -> a->1
cheaperAlternative ps = length (nub [name | name <- uniques, (elem name(remove name uniques))])
   where uniques= map  fst (nub ps)
